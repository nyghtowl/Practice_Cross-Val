# Copyright 2017 Google Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Original code at https://github.com/fchollet/keras/blob/master/examples/cifar10_cnn.py  
# Original license is at https://github.com/fchollet/keras/blob/master/LICENSE

from __future__ import print_function
import keras
from keras.datasets import cifar10
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten
from keras.layers import Conv2D, MaxPooling2D
import os
import pickle
from IPython.utils.path import ensure_dir_exists
import numpy as np

batch_size = 32
num_classes = 10
epochs = 200
workers = 8
num_pred_print = 20
data_augmentation = True
save_dir = os.getcwd() + "/saved_models/"
model_name = "keras_cifar10_trained_model.h5"
weights_name = 'keras_cifar10_weights.h5'

# load label names
label_list = os.path.expanduser("~") + '/.keras/datasets/cifar-10-batches-py/batches.meta'
with open(label_list, mode='rb') as f:
        labels = pickle.load(f)

# The data, shuffled and split between train and test sets:
print("Loading data...")
(x_train, y_train), (x_test, y_test) = cifar10.load_data()
print('x_train shape:', x_train.shape)
print(x_train.shape[0], 'train samples')
print(x_test.shape[0], 'test samples')

# Convert class vectors to binary class matrices.
y_train = keras.utils.to_categorical(y_train, num_classes)
y_test = keras.utils.to_categorical(y_test, num_classes)

print("Defining structure...")
model = Sequential()

model.add(Conv2D(32, (3, 3), padding='same',
                 input_shape=x_train.shape[1:]))
model.add(Activation('relu'))
model.add(Conv2D(32, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

model.add(Conv2D(64, (3, 3), padding='same'))
model.add(Activation('relu'))
model.add(Conv2D(64, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

model.add(Flatten())
model.add(Dense(512))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(num_classes))
model.add(Activation('softmax'))

# initiate RMSprop optimizer
opt = keras.optimizers.rmsprop(lr=0.0001, decay=1e-6)

# Let's train the model using RMSprop
model.compile(loss='categorical_crossentropy',
              optimizer=opt,
              metrics=['accuracy'])

x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
x_train /= 255
x_test /= 255

if not data_augmentation:
    print('Not using data augmentation.')
    model.fit(x_train, y_train,
              batch_size=batch_size,
              epochs=epochs,
              validation_data=(x_test, y_test),
              shuffle=True)
else:
    print('Using real-time data augmentation.')
    # This will do preprocessing and realtime data augmentation:
    datagen = ImageDataGenerator(
        featurewise_center=False,  # set input mean to 0 over the dataset
        samplewise_center=False,  # set each sample mean to 0
        featurewise_std_normalization=False,  # divide inputs by std of the dataset
        samplewise_std_normalization=False,  # divide each input by its std
        zca_whitening=False,  # apply ZCA whitening
        rotation_range=0,  # randomly rotate images in the range (degrees, 0 to 180)
        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)
        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)
        horizontal_flip=True,  # randomly flip images
        vertical_flip=False)  # randomly flip images

    # Compute quantities required for feature-wise normalization
    # (std, mean, and principal components if ZCA whitening is applied).
    print("Normalization...")
    datagen.fit(x_train)

    # Fit the model on the batches generated by datagen.flow().
    print("Training...")
    model.fit_generator(datagen.flow(x_train, y_train,
                                     batch_size=batch_size),
                        steps_per_epoch=x_train.shape[0] // batch_size,
                        epochs=epochs,
                        #validation_data=(x_test, y_test),
                        workers=workers)


# Save model
print("Saving...")
ensure_dir_exists(save_dir)
model.save(save_dir+model_name)
model.save_weights(save_dir+weights_name)


# Evaluate
print("Evaluating...")
evaluation = model.evaluate_generator(datagen.flow(x_test, y_test,
                                    batch_size=batch_size),
                                    steps=x_test.shape[0] // batch_size,
                                    workers=workers)

eval_results = zip(model.metrics_names, evaluation)
print("Evaluation results = ", *eval_results)


print("Predicting...")
pred_y = model.predict_generator(datagen.flow(x_test, y_test,
                        batch_size=batch_size),
                        steps=x_test.shape[0] // batch_size,
                        workers=workers)

for idx, y in enumerate(pred_y):
  print("Actual | Predicted = = %s | %s"% (labels['label_names'][np.argmax(y_test[idx])], labels['label_names'][np.argmax(y)]))
  if idx == num_pred_print: break

